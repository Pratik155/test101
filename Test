import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity
import re
from collections import Counter

# Sample DataFrame
data = {'Conv_id': [1, 2, 3, 4, 5],
        'customer_complaints': ['The product is not working properly', 
                                'I received a damaged item', 
                                'I want to cancel my subscription', 
                                'The delivery was very late', 
                                'I need a refund for my order']}

df = pd.DataFrame(data)

# Function to preprocess text
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'\W', ' ', text)  # Remove non-word characters
    text = re.sub(r'\s+', ' ', text)  # Remove extra whitespaces
    return text.strip()  # Strip leading and trailing whitespaces

# Preprocess the complaints
df['preprocessed_complaints'] = df['customer_complaints'].apply(preprocess_text)

# TF-IDF Vectorization
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(df['preprocessed_complaints'])

# K-Means Clustering
num_clusters = 3  # You can adjust this parameter
kmeans = KMeans(n_clusters=num_clusters)
kmeans.fit(tfidf_matrix)

# Assign cluster labels to DataFrame
df['cluster_label'] = kmeans.labels_

# Find the complaint closest to the center of each cluster
centers = kmeans.cluster_centers_
closest_complaints = []
for i in range(num_clusters):
    cluster_indices = df[df['cluster_label'] == i].index
    cluster_tfidf_matrix = tfidf_matrix[cluster_indices]
    similarity_to_center = cosine_similarity(cluster_tfidf_matrix, [centers[i]])
    closest_complaint_index = cluster_indices[np.argmax(similarity_to_center)]
    closest_complaint = df.loc[closest_complaint_index, 'customer_complaints']
    closest_complaints.append(closest_complaint)

# Get top 5 biggest complaints
top_5_complaints = df['customer_complaints'].value_counts().head(5)

print("Top 5 biggest complaints:")
print(top_5_complaints)
print("\nComplaints closest to the center of each cluster:")
for i, complaint in enumerate(closest_complaints):
    print(f"Cluster {i+1}: {complaint}")
